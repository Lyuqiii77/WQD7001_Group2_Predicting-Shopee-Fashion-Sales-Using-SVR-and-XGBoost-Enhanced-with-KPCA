import model_creation as tree
import pandas as pd
import joblib

# IMPORT TRAINING DATA
df = pd.read_csv("fashion_data_set.csv")
df['discount'] = 100*(1.-df['price_actual']/df['price_ori'])
# CREATE 4 TREES AND SAVE MODEL
# could be done automatically but too much work for the same result
# XGBOOST WITH KPCA
TreeDecision_3 = tree.TreeDecision_XGBOOST_KPCA()
TreeDecision_3.insert(data=1000)
TreeDecision_3.insert(data=500)
TreeDecision_3.insert(data=250)
TreeDecision_3.insert(data=150)
TreeDecision_3.insert(data=0)
TreeDecision_3.insert(data=200)
TreeDecision_3.insert(data=150.1)
TreeDecision_3.insert(data=249.9)
TreeDecision_3.insert(data=300)
TreeDecision_3.insert(data=250.1)
TreeDecision_3.insert(data=499.99)
TreeDecision_3.insert(data=999.9)
TreeDecision_3.insert(data=2500)
TreeDecision_3.insert(data=1500)
TreeDecision_3.insert(data=10000)
TreeDecision_3.insert(data=2499.9)
TreeDecision_3.insert(data=1000.1)
TreeDecision_3.train_structure_decomposition(data_frame=df)
# SVR
TreeSVR = tree.TreeDecision_SVR()
TreeSVR.insert(data=1000)
TreeSVR.insert(data=500)
TreeSVR.insert(data=250)
TreeSVR.insert(data=150)
TreeSVR.insert(data=0)
TreeSVR.insert(data=200)
TreeSVR.insert(data=150.1)
TreeSVR.insert(data=249.9)
TreeSVR.insert(data=300)
TreeSVR.insert(data=250.1)
TreeSVR.insert(data=499.99)
TreeSVR.insert(data=999.9)
TreeSVR.insert(data=2500)
TreeSVR.insert(data=1500)
TreeSVR.insert(data=10000)
TreeSVR.insert(data=2499.9)
TreeSVR.insert(data=1000.1)
TreeSVR.train_structure_decomposition(data_frame=df)
# XGBOOST
TreeDecision = tree.TreeDecision_XGBOOST()
TreeDecision.insert(data=1000)
TreeDecision.insert(data=500)
TreeDecision.insert(data=250)
TreeDecision.insert(data=150)
TreeDecision.insert(data=0)
TreeDecision.insert(data=200)
TreeDecision.insert(data=150.1)
TreeDecision.insert(data=249.9)
TreeDecision.insert(data=300)
TreeDecision.insert(data=250.1)
TreeDecision.insert(data=499.99)
TreeDecision.insert(data=999.9)
TreeDecision.insert(data=2500)
TreeDecision.insert(data=1500)
TreeDecision.insert(data=10000)
TreeDecision.insert(data=2499.9)
TreeDecision.insert(data=1000.1)
TreeDecision.train_structure_decomposition(data_frame=df)
# XGBOOST WITH PCA
TreeDecision_2 = tree.TreeDecision_XGBOOST_PCA()
TreeDecision_2.insert(data=1000)
TreeDecision_2.insert(data=500)
TreeDecision_2.insert(data=250)
TreeDecision_2.insert(data=150)
TreeDecision_2.insert(data=0)
TreeDecision_2.insert(data=200)
TreeDecision_2.insert(data=150.1)
TreeDecision_2.insert(data=249.9)
TreeDecision_2.insert(data=300)
TreeDecision_2.insert(data=250.1)
TreeDecision_2.insert(data=499.99)
TreeDecision_2.insert(data=999.9)
TreeDecision_2.insert(data=2500)
TreeDecision_2.insert(data=1500)
TreeDecision_2.insert(data=10000)
TreeDecision_2.insert(data=2499.9)
TreeDecision_2.insert(data=1000.1)
TreeDecision_2.train_structure_decomposition(data_frame=df)

# SAVE MODELS IN PKL (FROM CHAT GPT)
joblib.dump(TreeDecision_2, "TreeDecision_XGBOOST_PCA_model.pkl")
joblib.dump(TreeDecision, "TreeDecision_XGBOOST_model.pkl")
joblib.dump(TreeSVR, "tree_model_SVR.pkl")
joblib.dump(TreeDecision_3, "TreeDecision_XGBOOST_KPCA_model.pkl")
